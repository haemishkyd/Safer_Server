# server.py
import Queue
import socket
import threading
import calendar
import time
import MySQLdb
import xml.etree.ElementTree
from math import radians, cos, sin, asin, sqrt

#from dns.rdatatype import NULL
def logdiagdata(logstring):
    print('{}-{}-{} {}:{}'.format(time.strftime("%d"),time.strftime("%m"),time.strftime("%Y"),time.strftime("%H:%M:%S"),logstring))

def haversine(lon1, lat1, lon2, lat2):
    """
    Calculate the great circle distance between two points
    on the earth (specified in decimal degrees)
    """
    # convert decimal degrees to radians
    lon1, lat1, lon2, lat2 = map(radians, [lon1, lat1, lon2, lat2])

    # haversine formula
    dlon = lon2 - lon1
    dlat = lat2 - lat1
    a = sin(dlat/2)**2 + cos(lat1) * cos(lat2) * sin(dlon/2)**2
    c = 2 * asin(sqrt(a))
    r = 6371 # Radius of earth in kilometers. Use 3956 for miles
    return c * r

logdiagdata("Waiting for startup to be complete...")
time.sleep(2)
logdiagdata("Startup complete!")
#CREATION OF INTERNAL SOCKET TO LISTEN FOR ACTIONS
# create a server socket object
serverport = 9998
try:
    serversocket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
except socket.error:
    logdiagdata("Failed to create server socket")
    sys.exit()
# get local machine name
host = socket.gethostname()
# bind to the port
serversocket.bind(('0.0.0.0', serverport))
# queue up to 5 requests
serversocket.listen(5)

#create a connection to the database
db = MySQLdb.connect(host="localhost",user="root",passwd="empyrean69",db="SAfer")
cur = db.cursor()

server_run = True
closest_agent = 0

while server_run:
    # establish a connection
    clientsocket,addr = serversocket.accept()

    data = clientsocket.recv(1024)
    if data:
        if (str(data) != "ping"):
            if (len(str(data))>10):
                #logdiagdata(str(data))
                e=xml.etree.ElementTree.fromstring(str(data))
                lat_string=e.find('LatData').text
                long_string=e.find('LongData').text
                user_id = e.find('UserId').text
                call_flag = e.find('CallFlag').text
                logdiagdata("<<User:"+user_id+" Lat:"+lat_string+" Long:"+long_string+" Call Flag:"+call_flag+">>")
                if (user_id != '0'):
                    logdiagdata("--Update Agent Pos")
                    query_string=("UPDATE security_user_current SET lat_data=%s,long_data=%s WHERE sec_user_id=%s")
                    data_string=(lat_string,long_string,user_id)
                    cur.execute(query_string,data_string)
                    db.commit()
                else:
                    if (call_flag == '1'):
                        #find the closest guy
                        closest_agent = 1
                        logdiagdata("--Log Call")
                        query_string=("INSERT INTO security_user_calls (id,lat_data,long_data,call_flag) VALUES (%s,%s,%s,%s)")
                        data_string=(closest_agent,lat_string,long_string,'1')
                        cur.execute(query_string,data_string)
                        db.commit()
                    else:
                        logdiagdata("--No Call")
                logdiagdata("--Receive Complete")
                #fetch all the current locations of agents
                query_string=("SELECT * from security_user_current WHERE sec_user_id NOT IN (\'"+str(user_id)+"\')")
                cur.execute(query_string)
                agent_data = cur.fetchall ()
                db.commit()
                #----------------------------------------
                #fetch all open calls
                query_string=("SELECT * from security_user_calls")
                cur.execute(query_string)
                agent_calls = cur.fetchall ()
                db.commit()
                # print the rows
                response = "<foo>"
                response_call_flag = '0'
                for row in agent_data :
                    response_call_flag = '0'
                    for row_inner in agent_calls:
                        #logdiagdata("--"+str(row[1])+":"+str(row_inner[1])+" "+str(row_inner[4]))
                        if ((row[1] == row_inner[1]) and (str(row_inner[4])=='1')):
                            response_call_flag = '1'
                            logdiagdata("--Set Response")
                    response += "<agent_pos><agent_id>"+str(row[1])+"</agent_id><latitude>"+str(row[2])+"</latitude><longitude>"+str(row[3])+"</longitude><responding>"+response_call_flag+"</responding></agent_pos>"
                response += "</foo>"
                #logdiagdata(response)
                logdiagdata("--Send Complete")
                clientsocket.send(response)
            else:
                logdiagdata("--Junk received")
        else:
            clientsocket.send("Ahoy!")
            logdiagdata("Ping Request")
        clientsocket.close()

print "End"
serversocket.close()
